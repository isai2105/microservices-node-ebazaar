services:
  kafka:
    image: apache/kafka:3.9.1
    container_name: kafka
    networks:
      - app-network
    ports:
      - '9092:9092'
    environment:
      # Enable KRaft mode
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1

      # Internal cluster communication
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # Metadata quorum instead of Zookeeper
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      CLUSTER_ID: 'kraft-cluster-12345' # must be unique and stable

      # Logging
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          '/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list',
        ]
      interval: 300s
      timeout: 5s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:16
    networks:
      - app-network
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: app
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 10
  user-service:
    image: myorg/user-service:1.0.0
    networks:
      - app-network
    ports:
      - '3001:3000'
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: user-service
        SKIP_PRISMA: false
    environment:
      - SERVICE_NAME=user-service
      - SKIP_PRISMA=false
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/app?schema=users
      - JWT_SECRET=devsecret
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=user-service
    depends_on:
      - kafka
      - postgres
  product-service:
    image: myorg/product-service:1.0.0
    networks:
      - app-network
    ports:
      - '3002:3000'
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: product-service
        SKIP_PRISMA: false
    environment:
      - SERVICE_NAME=product-service
      - SKIP_PRISMA=false
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/app?schema=products
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=product-service
    depends_on:
      - kafka
      - postgres
  order-service:
    image: myorg/order-service:1.0.0
    networks:
      - app-network
    ports:
      - '3003:3000'
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: order-service
        SKIP_PRISMA: false
    environment:
      - SERVICE_NAME=order-service
      - SKIP_PRISMA=false
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/app?schema=orders
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=order-service
      - JWT_SECRET=devsecret
    depends_on:
      - kafka
      - postgres
  payment-service:
    image: myorg/payment-service:1.0.0
    networks:
      - app-network
    ports:
      - '3004:3000'
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: payment-service
        SKIP_PRISMA: true
    environment:
      - SERVICE_NAME=payment-service
      - SKIP_PRISMA=true
      - PORT=3000
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=payment-service
    depends_on:
      - kafka
  notification-service:
    image: myorg/notification-service:1.0.0
    networks:
      - app-network
    ports:
      - '3005:3000'
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: notification-service
        SKIP_PRISMA: true
    environment:
      - SERVICE_NAME=notification-service
      - SKIP_PRISMA=true
      - PORT=3000
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=notification-service
    depends_on:
      - kafka

volumes:
  kafka_data:
  postgres_data:

networks:
  app-network:
    driver: bridge
