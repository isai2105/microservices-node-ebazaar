services:
  kafka:
    image: apache/kafka:3.9.1
    container_name: kafka
    networks:
      - app-network
    ports:
      - '${KAFKA_SERVICE_PORT}:9092'
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_LISTENERS: 'PLAINTEXT://:${KAFKA_PORT},CONTROLLER://:${KAFKA_CONTROLLER_PORT}'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:${KAFKA_PORT}'
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:${KAFKA_CONTROLLER_PORT}'
      CLUSTER_ID: '${KAFKA_CLUSTER_ID}'
      KAFKA_LOG_DIRS: ${KAFKA_LOG_DIRS}
    volumes:
      - kafka_data:${KAFKA_LOG_DIRS}
    healthcheck:
      test:
        [
          'CMD-SHELL',
          '/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list',
        ]
      interval: 300s
      timeout: 5s
      retries: 5
      start_period: 60s

  postgres:
    image: postgres:16
    networks:
      - app-network
    ports:
      - '${DB_PORT}:5432'
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${POSTGRES_INIT_SCRIPT}:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 10
  user-service:
    image: myorg/user-service:1.0.0
    networks:
      - app-network
    ports:
      - '${USER_SERVICE_PORT}:3000'
    env_file:
      - .env.shared
      - services/user-service/.env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: user-service
        SKIP_PRISMA: false
    environment:
      NODE_ENV: ${NODE_ENV}
      SERVICE_NAME: user-service
      SKIP_PRISMA: 'false'
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=users
    depends_on:
      - kafka
      - postgres
  product-service:
    image: myorg/product-service:1.0.0
    networks:
      - app-network
    ports:
      - '${PRODUCT_SERVICE_PORT}:3000'
    env_file:
      - .env.shared
      - services/product-service/.env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: product-service
        SKIP_PRISMA: false
    environment:
      NODE_ENV: ${NODE_ENV}
      SERVICE_NAME: product-service
      SKIP_PRISMA: 'false'
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=products
    depends_on:
      - kafka
      - postgres
  order-service:
    image: myorg/order-service:1.0.0
    networks:
      - app-network
    ports:
      - '${ORDER_SERVICE_PORT}:3000'
    env_file:
      - .env.shared
      - services/order-service/.env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: order-service
        SKIP_PRISMA: false
    environment:
      NODE_ENV: ${NODE_ENV}
      SERVICE_NAME: order-service
      SKIP_PRISMA: 'false'
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=orders
    depends_on:
      - kafka
      - postgres
  payment-service:
    image: myorg/payment-service:1.0.0
    networks:
      - app-network
    ports:
      - '${PAYMENT_SERVICE_PORT}:3000'
    env_file:
      - .env.shared
      - services/payment-service/.env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: payment-service
        SKIP_PRISMA: true
    environment:
      NODE_ENV: ${NODE_ENV}
      SERVICE_NAME: payment-service
      SKIP_PRISMA: 'true'
    depends_on:
      - kafka
  notification-service:
    image: myorg/notification-service:1.0.0
    networks:
      - app-network
    ports:
      - '${NOTIFICATION_SERVICE_PORT}:3000'
    env_file:
      - .env.shared
      - services/notification-service/.env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: notification-service
        SKIP_PRISMA: true
    environment:
      NODE_ENV: ${NODE_ENV}
      SERVICE_NAME: notification-service
      SKIP_PRISMA: 'true'
    depends_on:
      - kafka

volumes:
  kafka_data:
  postgres_data:

networks:
  app-network:
    driver: bridge
